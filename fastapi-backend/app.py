from fastapi import FastAPI, UploadFile, File, Form
from fastapi.middleware.cors import CORSMiddleware
from PIL import Image
import io
import json

from geminimodelforimageanalysis import analyze_handwriting
from finalresponsegeneratemodel import generate_final_response


app = FastAPI(title="CalmScribe Backend")


origins = ["*"]


app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


@app.post("/generate-response")
async def genereate_response(fullName: str = Form(...), age: float = Form(...), noOfHoursSleep: float = Form(...), mood: str = Form(...), exercise: str = Form(...), imageInputByUser: UploadFile = File(...)):
    
    try:

        final_analysis = ''


        image_content = await imageInputByUser.read()

        img = Image.open(io.BytesIO(image_content))
        

        handwriting_analysis_result = analyze_handwriting(img=img)

        if handwriting_analysis_result:

            prompt = (
                f"Analyze the following data provided by the user: "
                f"{{"
                f"  'fullName': '{fullName}', "
                f"  'age': {age}, "
                f"  'noOfHoursSleep': {noOfHoursSleep}, "
                f"  'mood': '{mood}', "
                f"  'exercise': '{exercise}', "
                f"  'handwritingAnalysis': '{handwriting_analysis_result}'"
                f"}}. "
                f"Based on this data, perform the following tasks: "
                f"1) Provide detailed handwriting insights. "
                f"2) Analyze the correlation between mood and potential stress triggers. "
                f"3) Generate personalized recommendations to improve overall well-being. "
                f"4) Summarize the analysis with a concise conclusion, using actionable language and referring to the user as 'you' instead of their real name. "
                f"5) Generate scoring data for handwriting aspects such as depth, stress, etc., with values between 0-100. "
                f"6) Generate future mood prediction data for the next 4 days starting tomorrow, with values between 0-100. "
                f"7) Provide a description for the handwriting scores graph, explaining what each aspect (e.g., depth, stress) indicates. "
                f"8) Provide a description for the future mood prediction graph, explaining how the values represent expected changes in mood over the next 4 days. "
                f"Return the result as a valid JSON object. Format the values of each key using Markdown syntax. "
                f"The structure should be: "
                f"{{"
                f"  'handwritingInsights': "
                f"    '# Handwriting Insights\\n\\n"
                f"    **Details:**\\n\\n"
                f"    - Bullet point 1 describing handwriting insights\\n"
                f"    - Bullet point 2 describing handwriting insights', "
                f"  'moodStressCorrelation': "
                f"    '# Mood-Stress Correlation\\n\\n"
                f"    **Analysis:**\\n\\n"
                f"    - Bullet point 1 analyzing mood and stress correlation\\n"
                f"    - Bullet point 2 analyzing mood and stress correlation', "
                f"  'personalizedRecommendations': "
                f"    '# Recommendations\\n\\n"
                f"    - Recommendation 1 for improving well-being\\n"
                f"    - Recommendation 2 for improving well-being\\n"
                f"    - Recommendation 3 for improving well-being', "
                f"  'summary': "
                f"    '# Summary\\n\\n"
                f"    **Summary Text Here:**\\n\\n"
                f"    - Key point 1 summarizing the analysis\\n"
                f"    - Key point 2 summarizing the analysis', "
                f"  'conclusion': "
                f"    '# Conclusion\\n\\n"
                f"    **Actionable Steps:**\\n\\n"
                f"    - Step 1 for actionable improvement\\n"
                f"    - Step 2 for actionable improvement\\n"
                f"    - Step 3 for actionable improvement', "
                f"  'handwritingScores': "
                f"    '{{"
                f"      \"labels\": [\"Depth\", \"Stress\", \"Pressure\", \"Slant\", \"Speed\"], "
                f"      \"datasets\": [{{"
                f"        \"data\": [Dynamic values generated by the model] "
                f"      }}], "
                f"      \"description\": \"This graph evaluates handwriting aspects such as depth, stress, pressure, slant, and speed. Each score (0-100) reflects the handwriting quality and underlying factors like emotional state, attention to detail, and stress levels.\" "
                f"    }}', "
                f"  'futureMoodPrediction': "
                f"    '{{"
                f"      \"labels\": [\"Tomorrow\", \"Day 2\", \"Day 3\", \"Day 4\"], "
                f"      \"datasets\": [{{"
                f"        \"data\": [Dynamic values generated by the model] "
                f"      }}], "
                f"      \"description\": \"This graph predicts the userâ€™s mood for the next 4 days based on current data. Each value (0-100) represents expected mood stability, positivity, or potential challenges.\" "
                f"    }}' "
                f"}}."
            )
            

            final_analysis = generate_final_response(prompt=prompt)

        return {
            'success': True,
            'analysis': final_analysis
        }
    

    except Exception as e:

        print(e)

        return {
            'success': False,
            'message': str(e)
        }
